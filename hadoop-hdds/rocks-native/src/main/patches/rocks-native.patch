/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

diff --git a/include/rocksdb/sst_dump_tool.h b/include/rocksdb/sst_dump_tool.h
index 9261ba47d..1e62b88a3 100644
--- a/include/rocksdb/sst_dump_tool.h
+++ b/include/rocksdb/sst_dump_tool.h
@@ -11,7 +11,8 @@ namespace ROCKSDB_NAMESPACE {
 
 class SSTDumpTool {
  public:
-  int Run(int argc, char const* const* argv, Options options = Options());
+  int Run(int argc, char const* const* argv, Options options = Options(),
+          FILE* out = stdout, FILE* err = stderr);
 };
 
 }  // namespace ROCKSDB_NAMESPACE
diff --git a/table/sst_file_dumper.cc b/table/sst_file_dumper.cc
index eefbaaeee..98d37dd5c 100644
--- a/table/sst_file_dumper.cc
+++ b/table/sst_file_dumper.cc
@@ -45,7 +45,7 @@ SstFileDumper::SstFileDumper(const Options& options,
                              Temperature file_temp, size_t readahead_size,
                              bool verify_checksum, bool output_hex,
                              bool decode_blob_index, const EnvOptions& soptions,
-                             bool silent)
+                             bool silent, FILE* out, FILE* err)
     : file_name_(file_path),
       read_num_(0),
       file_temp_(file_temp),
@@ -57,10 +57,13 @@ SstFileDumper::SstFileDumper(const Options& options,
       ioptions_(options_),
       moptions_(ColumnFamilyOptions(options_)),
       read_options_(verify_checksum, false),
-      internal_comparator_(BytewiseComparator()) {
+      internal_comparator_(BytewiseComparator()),
+      out_(out),
+      err_(err)
+      {
   read_options_.readahead_size = readahead_size;
   if (!silent_) {
-    fprintf(stdout, "Process %s\n", file_path.c_str());
+    fprintf(out_, "Process %s\n", file_path.c_str());
   }
   init_result_ = GetTableReader(file_name_);
 }
@@ -253,17 +256,17 @@ Status SstFileDumper::ShowAllCompressionSizes(
     int32_t compress_level_from, int32_t compress_level_to,
     uint32_t max_dict_bytes, uint32_t zstd_max_train_bytes,
     uint64_t max_dict_buffer_bytes, bool use_zstd_dict_trainer) {
-  fprintf(stdout, "Block Size: %" ROCKSDB_PRIszt "\n", block_size);
+  fprintf(out_, "Block Size: %" ROCKSDB_PRIszt "\n", block_size);
   for (auto& i : compression_types) {
     if (CompressionTypeSupported(i.first)) {
-      fprintf(stdout, "Compression: %-24s\n", i.second);
+      fprintf(out_, "Compression: %-24s\n", i.second);
       CompressionOptions compress_opt;
       compress_opt.max_dict_bytes = max_dict_bytes;
       compress_opt.zstd_max_train_bytes = zstd_max_train_bytes;
       compress_opt.max_dict_buffer_bytes = max_dict_buffer_bytes;
       compress_opt.use_zstd_dict_trainer = use_zstd_dict_trainer;
       for (int32_t j = compress_level_from; j <= compress_level_to; j++) {
-        fprintf(stdout, "Compression level: %d", j);
+        fprintf(out_, "Compression level: %d", j);
         compress_opt.level = j;
         Status s = ShowCompressionSize(block_size, i.first, compress_opt);
         if (!s.ok()) {
@@ -271,7 +274,7 @@ Status SstFileDumper::ShowAllCompressionSizes(
         }
       }
     } else {
-      fprintf(stdout, "Unsupported compression type: %s.\n", i.second);
+      fprintf(err_, "Unsupported compression type: %s.\n", i.second);
     }
   }
   return Status::OK();
@@ -307,9 +310,9 @@ Status SstFileDumper::ShowCompressionSize(
   }
 
   std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
-  fprintf(stdout, " Size: %10" PRIu64, file_size);
-  fprintf(stdout, " Blocks: %6" PRIu64, num_data_blocks);
-  fprintf(stdout, " Time Taken: %10s microsecs",
+  fprintf(out_, " Size: %10" PRIu64, file_size);
+  fprintf(out_, " Blocks: %6" PRIu64, num_data_blocks);
+  fprintf(out_, " Time Taken: %10s microsecs",
           std::to_string(
               std::chrono::duration_cast<std::chrono::microseconds>(end - start)
                   .count())
@@ -342,11 +345,11 @@ Status SstFileDumper::ShowCompressionSize(
                              : ((static_cast<double>(not_compressed_blocks) /
                                  static_cast<double>(num_data_blocks)) *
                                 100.0);
-  fprintf(stdout, " Compressed: %6" PRIu64 " (%5.1f%%)", compressed_blocks,
+  fprintf(out_, " Compressed: %6" PRIu64 " (%5.1f%%)", compressed_blocks,
           compressed_pcnt);
-  fprintf(stdout, " Not compressed (ratio): %6" PRIu64 " (%5.1f%%)",
+  fprintf(out_, " Not compressed (ratio): %6" PRIu64 " (%5.1f%%)",
           ratio_not_compressed_blocks, ratio_not_compressed_pcnt);
-  fprintf(stdout, " Not compressed (abort): %6" PRIu64 " (%5.1f%%)\n",
+  fprintf(out_, " Not compressed (abort): %6" PRIu64 " (%5.1f%%)\n",
           not_compressed_blocks, not_compressed_pcnt);
   return Status::OK();
 }
@@ -362,7 +365,7 @@ Status SstFileDumper::ReadTableProperties(uint64_t table_magic_number,
       /* memory_allocator= */ nullptr, prefetch_buffer);
   if (!s.ok()) {
     if (!silent_) {
-      fprintf(stdout, "Not able to read table properties\n");
+      fprintf(err_, "Not able to read table properties\n");
     }
   }
   return s;
@@ -410,7 +413,7 @@ Status SstFileDumper::SetTableOptionsByMagicNumber(
 
     options_.table_factory.reset(NewPlainTableFactory(plain_table_options));
     if (!silent_) {
-      fprintf(stdout, "Sst file format: plain table\n");
+      fprintf(out_, "Sst file format: plain table\n");
     }
   } else {
     char error_msg_buffer[80];
@@ -427,12 +430,53 @@ Status SstFileDumper::SetOldTableOptions() {
   assert(table_properties_ == nullptr);
   options_.table_factory = std::make_shared<BlockBasedTableFactory>();
   if (!silent_) {
-    fprintf(stdout, "Sst file format: block-based(old version)\n");
+    fprintf(out_, "Sst file format: block-based(old version)\n");
   }
 
   return Status::OK();
 }
 
+void write(int value, FILE* file) {
+  char b[4];
+  b[3] =  value & 0x000000ff;
+  b[2] = (value & 0x0000ff00) >> 8;
+  b[1] = (value & 0x00ff0000) >> 16;
+  b[0] = (value & 0xff000000) >> 24;
+  std::fwrite(b, 4, 1, file);
+}
+
+void write(const char* value, int length, FILE* file) {
+  write(length, file);
+  fwrite(value, length, 1, file);
+}
+
+void write(const std::string& value, FILE* file) {
+  write(value.data(), (int)value.length(), file);
+}
+
+void write(Slice &slice, FILE* file) {
+  int size = (int)slice.size();
+  write(slice.data(), size, file);
+}
+
+void write(SequenceNumber sequenceNumber, FILE* file) {
+
+  char b[8];
+  int idx = 7;
+  while (idx >= 0) {
+    b[idx] = sequenceNumber % 256;
+    sequenceNumber /= 256;
+    idx -= 1;
+  }
+  fwrite(b, 8, 1, file);
+}
+
+void write(ParsedInternalKey &key, FILE* file) {
+  write(key.user_key, file);
+  write(key.sequence, file);
+  write(static_cast<int>(key.type), file);
+}
+
 Status SstFileDumper::ReadSequential(bool print_kv, uint64_t read_num,
                                      bool has_from, const std::string& from_key,
                                      bool has_to, const std::string& to_key,
@@ -478,22 +522,19 @@ Status SstFileDumper::ReadSequential(bool print_kv, uint64_t read_num,
 
     if (print_kv) {
       if (!decode_blob_index_ || ikey.type != kTypeBlobIndex) {
-        fprintf(stdout, "%s => %s\n",
-                ikey.DebugString(true, output_hex_).c_str(),
-                value.ToString(output_hex_).c_str());
+        write(ikey, out_);
+        write(value, out_);
       } else {
         BlobIndex blob_index;
-
         const Status s = blob_index.DecodeFrom(value);
         if (!s.ok()) {
-          fprintf(stderr, "%s => error decoding blob index\n",
-                  ikey.DebugString(true, output_hex_).c_str());
+          write(ikey, err_);
+          write("error decoding blob index", err_);
           continue;
         }
-
-        fprintf(stdout, "%s => %s\n",
-                ikey.DebugString(true, output_hex_).c_str(),
-                blob_index.DebugString(output_hex_).c_str());
+        write(ikey, out_);
+        std::string v = blob_index.DebugString(output_hex_);
+        write(v, out_);
       }
     }
   }
diff --git a/table/sst_file_dumper.h b/table/sst_file_dumper.h
index 7be876390..ea07154da 100644
--- a/table/sst_file_dumper.h
+++ b/table/sst_file_dumper.h
@@ -22,7 +22,9 @@ class SstFileDumper {
                          bool verify_checksum, bool output_hex,
                          bool decode_blob_index,
                          const EnvOptions& soptions = EnvOptions(),
-                         bool silent = false);
+                         bool silent = false,
+                         FILE* out = stdout,
+                         FILE* err = stderr);
 
   Status ReadSequential(bool print_kv, uint64_t read_num, bool has_from,
                         const std::string& from_key, bool has_to,
@@ -94,6 +96,8 @@ class SstFileDumper {
   ReadOptions read_options_;
   InternalKeyComparator internal_comparator_;
   std::unique_ptr<TableProperties> table_properties_;
+  FILE* out_;
+  FILE* err_;
 };
 
 }  // namespace ROCKSDB_NAMESPACE
diff --git a/tools/sst_dump_tool.cc b/tools/sst_dump_tool.cc
index 7053366e7..75720a12d 100644
--- a/tools/sst_dump_tool.cc
+++ b/tools/sst_dump_tool.cc
@@ -31,7 +31,7 @@ static const std::vector<std::pair<CompressionType, const char*>>
 
 namespace {
 
-void print_help(bool to_stderr) {
+void print_help(bool to_stderr, FILE* err_, FILE* out_) {
   std::string supported_compressions;
   for (CompressionType ct : GetSupportedCompressions()) {
     if (!supported_compressions.empty()) {
@@ -43,7 +43,7 @@ void print_help(bool to_stderr) {
     supported_compressions += str;
   }
   fprintf(
-      to_stderr ? stderr : stdout,
+      to_stderr ? err_ : out_,
       R"(sst_dump --file=<data_dir_OR_sst_file> [--command=check|scan|raw|recompress|identify]
     --file=<data_dir_OR_sst_file>
       Path to SST file or directory containing SST files
@@ -149,7 +149,8 @@ bool ParseIntArg(const char* arg, const std::string arg_name,
 }
 }  // namespace
 
-int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
+int SSTDumpTool::Run(int argc, char const* const* argv, Options options,
+                     FILE* out, FILE* err) {
   std::string env_uri, fs_uri;
   const char* dir_or_file = nullptr;
   uint64_t read_num = std::numeric_limits<uint64_t>::max();
@@ -170,6 +171,7 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
   bool has_compression_level_from = false;
   bool has_compression_level_to = false;
   bool has_specified_compression_types = false;
+  bool silent = false;
   std::string from_key;
   std::string to_key;
   std::string block_size_str;
@@ -197,7 +199,9 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
   int64_t tmp_val;
 
   for (int i = 1; i < argc; i++) {
-    if (strncmp(argv[i], "--env_uri=", 10) == 0) {
+    if (strncmp(argv[i], "--silent", 8) == 0) {
+      silent = true;
+    } else if (strncmp(argv[i], "--env_uri=", 10) == 0) {
       env_uri = argv[i] + 10;
     } else if (strncmp(argv[i], "--fs_uri=", 9) == 0) {
       fs_uri = argv[i] + 9;
@@ -273,7 +277,7 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
         std::cerr << pik_status.getState() << "\n";
         retc = -1;
       }
-      fprintf(stdout, "key=%s\n", ikey.DebugString(true, true).c_str());
+      fprintf(out, "key=%s\n", ikey.DebugString(true, true).c_str());
       return retc;
     } else if (ParseIntArg(argv[i], "--compression_level_from=",
                            "compression_level_from must be numeric",
@@ -288,9 +292,9 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
                            "compression_max_dict_bytes must be numeric",
                            &tmp_val)) {
       if (tmp_val < 0 || tmp_val > std::numeric_limits<uint32_t>::max()) {
-        fprintf(stderr, "compression_max_dict_bytes must be a uint32_t: '%s'\n",
+        fprintf(err, "compression_max_dict_bytes must be a uint32_t: '%s'\n",
                 argv[i]);
-        print_help(/*to_stderr*/ true);
+        print_help(/*to_stderr*/ true, err, out);
         return 1;
       }
       compression_max_dict_bytes = static_cast<uint32_t>(tmp_val);
@@ -298,10 +302,10 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
                            "compression_zstd_max_train_bytes must be numeric",
                            &tmp_val)) {
       if (tmp_val < 0 || tmp_val > std::numeric_limits<uint32_t>::max()) {
-        fprintf(stderr,
+        fprintf(err,
                 "compression_zstd_max_train_bytes must be a uint32_t: '%s'\n",
                 argv[i]);
-        print_help(/*to_stderr*/ true);
+        print_help(/*to_stderr*/ true, err, out);
         return 1;
       }
       compression_zstd_max_train_bytes = static_cast<uint32_t>(tmp_val);
@@ -309,41 +313,41 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
                            "compression_max_dict_buffer_bytes must be numeric",
                            &tmp_val)) {
       if (tmp_val < 0) {
-        fprintf(stderr,
+        fprintf(err,
                 "compression_max_dict_buffer_bytes must be positive: '%s'\n",
                 argv[i]);
-        print_help(/*to_stderr*/ true);
+        print_help(/*to_stderr*/ true, err, out);
         return 1;
       }
       compression_max_dict_buffer_bytes = static_cast<uint64_t>(tmp_val);
     } else if (strcmp(argv[i], "--compression_use_zstd_finalize_dict") == 0) {
       compression_use_zstd_finalize_dict = true;
     } else if (strcmp(argv[i], "--help") == 0) {
-      print_help(/*to_stderr*/ false);
+      print_help(/*to_stderr*/ false, err, out);
       return 0;
     } else if (strcmp(argv[i], "--version") == 0) {
       printf("%s\n", GetRocksBuildInfoAsString("sst_dump").c_str());
       return 0;
     } else {
-      fprintf(stderr, "Unrecognized argument '%s'\n\n", argv[i]);
-      print_help(/*to_stderr*/ true);
+      fprintf(err, "Unrecognized argument '%s'\n\n", argv[i]);
+      print_help(/*to_stderr*/ true, err, out);
       return 1;
     }
   }
 
   if(has_compression_level_from && has_compression_level_to) {
     if(!has_specified_compression_types || compression_types.size() != 1) {
-      fprintf(stderr, "Specify one compression type.\n\n");
+      fprintf(err, "Specify one compression type.\n\n");
       exit(1);
     }
   } else if(has_compression_level_from || has_compression_level_to) {
-    fprintf(stderr, "Specify both --compression_level_from and "
+    fprintf(err, "Specify both --compression_level_from and "
                      "--compression_level_to.\n\n");
     exit(1);
   }
 
   if (use_from_as_prefix && has_from) {
-    fprintf(stderr, "Cannot specify --prefix and --from\n\n");
+    fprintf(err, "Cannot specify --prefix and --from\n\n");
     exit(1);
   }
 
@@ -357,8 +361,8 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
   }
 
   if (dir_or_file == nullptr) {
-    fprintf(stderr, "file or directory must be specified.\n\n");
-    print_help(/*to_stderr*/ true);
+    fprintf(err, "file or directory must be specified.\n\n");
+    print_help(/*to_stderr*/ true, err, out);
     exit(1);
   }
 
@@ -373,10 +377,10 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
     Status s = Env::CreateFromUri(config_options, env_uri, fs_uri, &options.env,
                                   &env_guard);
     if (!s.ok()) {
-      fprintf(stderr, "CreateEnvFromUri: %s\n", s.ToString().c_str());
+      fprintf(err, "CreateEnvFromUri: %s\n", s.ToString().c_str());
       exit(1);
-    } else {
-      fprintf(stdout, "options.env is %p\n", options.env);
+    } else if (!silent){
+      fprintf(out, "options.env is %p\n", options.env);
     }
   }
 
@@ -390,7 +394,7 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
     Status s = env->FileExists(dir_or_file);
     // dir_or_file does not exist
     if (!s.ok()) {
-      fprintf(stderr, "%s%s: No such file or directory\n", s.ToString().c_str(),
+      fprintf(err, "%s%s: No such file or directory\n", s.ToString().c_str(),
               dir_or_file);
       return 1;
     }
@@ -421,10 +425,11 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
 
     ROCKSDB_NAMESPACE::SstFileDumper dumper(
         options, filename, Temperature::kUnknown, readahead_size,
-        verify_checksum, output_hex, decode_blob_index);
+        verify_checksum, output_hex, decode_blob_index, EnvOptions(),
+        silent, out, err);
     // Not a valid SST
     if (!dumper.getStatus().ok()) {
-      fprintf(stderr, "%s: %s\n", filename.c_str(),
+      fprintf(err, "%s: %s\n", filename.c_str(),
               dumper.getStatus().ToString().c_str());
       continue;
     } else {
@@ -433,8 +438,9 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
       // where there is at least one valid SST
       if (valid_sst_files.size() == 1) {
         // from_key and to_key are only used for "check", "scan", or ""
-        if (command == "check" || command == "scan" || command == "") {
-          fprintf(stdout, "from [%s] to [%s]\n",
+        if (!silent && (command == "check" || command == "scan" ||
+                        command == "")) {
+          fprintf(out, "from [%s] to [%s]\n",
                   ROCKSDB_NAMESPACE::Slice(from_key).ToString(true).c_str(),
                   ROCKSDB_NAMESPACE::Slice(to_key).ToString(true).c_str());
         }
@@ -449,7 +455,7 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
           compression_zstd_max_train_bytes, compression_max_dict_buffer_bytes,
           !compression_use_zstd_finalize_dict);
       if (!st.ok()) {
-        fprintf(stderr, "Failed to recompress: %s\n", st.ToString().c_str());
+        fprintf(err, "Failed to recompress: %s\n", st.ToString().c_str());
         exit(1);
       }
       return 0;
@@ -461,10 +467,10 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
 
       st = dumper.DumpTable(out_filename);
       if (!st.ok()) {
-        fprintf(stderr, "%s: %s\n", filename.c_str(), st.ToString().c_str());
+        fprintf(err, "%s: %s\n", filename.c_str(), st.ToString().c_str());
         exit(1);
       } else {
-        fprintf(stdout, "raw dump written to file %s\n", &out_filename[0]);
+        fprintf(out, "raw dump written to file %s\n", &out_filename[0]);
       }
       continue;
     }
@@ -476,7 +482,7 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
           has_from || use_from_as_prefix, from_key, has_to, to_key,
           use_from_as_prefix);
       if (!st.ok()) {
-        fprintf(stderr, "%s: %s\n", filename.c_str(),
+        fprintf(err, "%s: %s\n", filename.c_str(),
             st.ToString().c_str());
       }
       total_read += dumper.GetReadNumber();
@@ -488,10 +494,10 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
     if (command == "verify") {
       st = dumper.VerifyChecksum();
       if (!st.ok()) {
-        fprintf(stderr, "%s is corrupted: %s\n", filename.c_str(),
+        fprintf(err, "%s is corrupted: %s\n", filename.c_str(),
                 st.ToString().c_str());
       } else {
-        fprintf(stdout, "The file is ok\n");
+        fprintf(out, "The file is ok\n");
       }
       continue;
     }
@@ -503,15 +509,15 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
           table_properties_from_reader;
       st = dumper.ReadTableProperties(&table_properties_from_reader);
       if (!st.ok()) {
-        fprintf(stderr, "%s: %s\n", filename.c_str(), st.ToString().c_str());
-        fprintf(stderr, "Try to use initial table properties\n");
+        fprintf(err, "%s: %s\n", filename.c_str(), st.ToString().c_str());
+        fprintf(err, "Try to use initial table properties\n");
         table_properties = dumper.GetInitTableProperties();
       } else {
         table_properties = table_properties_from_reader.get();
       }
       if (table_properties != nullptr) {
         if (show_properties) {
-          fprintf(stdout,
+          fprintf(out,
                   "Table Properties:\n"
                   "------------------------------\n"
                   "  %s",
@@ -523,18 +529,18 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
         total_index_block_size += table_properties->index_size;
         total_filter_block_size += table_properties->filter_size;
         if (show_properties) {
-          fprintf(stdout,
+          fprintf(out,
                   "Raw user collected properties\n"
                   "------------------------------\n");
           for (const auto& kv : table_properties->user_collected_properties) {
             std::string prop_name = kv.first;
             std::string prop_val = Slice(kv.second).ToString(true);
-            fprintf(stdout, "  # %s: 0x%s\n", prop_name.c_str(),
+            fprintf(out, "  # %s: 0x%s\n", prop_name.c_str(),
                     prop_val.c_str());
           }
         }
       } else {
-        fprintf(stderr, "Reader unexpectedly returned null properties\n");
+        fprintf(err, "Reader unexpectedly returned null properties\n");
       }
     }
   }
@@ -555,9 +561,9 @@ int SSTDumpTool::Run(int argc, char const* const* argv, Options options) {
     // Exit with an error state
     if (dir) {
       fprintf(stdout, "------------------------------\n");
-      fprintf(stderr, "No valid SST files found in %s\n", dir_or_file);
+      fprintf(err, "No valid SST files found in %s\n", dir_or_file);
     } else {
-      fprintf(stderr, "%s is not a valid SST file\n", dir_or_file);
+      fprintf(err, "%s is not a valid SST file\n", dir_or_file);
     }
     return 1;
   } else {
