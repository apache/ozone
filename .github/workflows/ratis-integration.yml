# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: ratis-integration
on:
  push: # FIXME temporary
  schedule:
    - cron: 30 6 * * *
env:
  FAIL_FAST: ${{ github.event_name == 'pull_request' }}
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
concurrency:
  group: ci-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
jobs:
  ratis:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    outputs:
      version: ${{ steps.versions.outputs.ratis }}
      thirdparty: ${{ steps.versions.outputs.thirdparty }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          repository: apache/ratis
      - name: Get component versions
        id: versions
        run: |
          ratis_hash=$(git rev-parse --short HEAD)
          ratis_version="2.3.0-${ratis_hash}-SNAPSHOT"
          thirdparty_version="$(mvn help:evaluate -Dexpression=ratis.thirdparty.version -q -DforceStdout)"
          echo "::set-output name=ratis::${ratis_version}"
          echo "::set-output name=thirdparty::${thirdparty_version}"
      - name: Maven cache for Ratis
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/org/apache/ratis
          key: ratis-${{ steps.versions.outputs.ratis }}
      - name: Run a full build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mvn versions:set -DnewVersion="${{ steps.versions.outputs.ratis }}"
          dev-support/checks/build.sh
  ratis-thirdparty:
    runs-on: ubuntu-18.04
    needs:
      - ratis
    timeout-minutes: 30
    outputs:
      protobuf: ${{ steps.versions.outputs.protobuf }}
      grpc: ${{ steps.versions.outputs.grpc }}
      netty: ${{ steps.versions.outputs.netty }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          repository: apache/ratis-thirdparty
          ref: ${{ needs.ratis.outputs.thirdparty }}
      - name: Get component versions
        id: versions
        run: |
          echo "::set-output name=protobuf::$(mvn help:evaluate -Dexpression=shaded.protobuf.version -q -DforceStdout)"
          echo "::set-output name=grpc::$(mvn help:evaluate -Dexpression=shaded.grpc.version -q -DforceStdout)"
          echo "::set-output name=netty::$(mvn help:evaluate -Dexpression=shaded.netty.version -q -DforceStdout)"
  build:
    needs:
      - ratis
      - ratis-thirdparty
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    strategy:
      matrix:
        java: [ 8 ]
      fail-fast: false
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Cache for npm dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Cache for maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-repo-${{ hashFiles('**/pom.xml') }}-${{ matrix.java }}
          restore-keys: |
            maven-repo-${{ hashFiles('**/pom.xml') }}
            maven-repo-
      - name: Maven cache for Ratis
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/org/apache/ratis
          key: ratis-${{ needs.ratis.outputs.version }}
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Run a full build
        run: |
          hadoop-ozone/dev-support/checks/build.sh -Pcoverage -Pdist \
            -Dratis.version="${{ needs.ratis.outputs.version }}" \
            -Dratis.thirdparty.version="${{ needs.ratis.outputs.thirdparty }}" \
            -Dgrpc.protobuf-compile.version="${{ needs.ratis-thirdparty.outputs.protobuf }}" \
            -Dio.grpc.version="${{ needs.ratis-thirdparty.outputs.grpc }}" \
            -Dnetty.version="${{ needs.ratis-thirdparty.outputs.netty }}" \
            -Dtcnative.version="2.0.48.Final" # FIXME
      - name: Store binaries for tests
        uses: actions/upload-artifact@v2
        with:
          name: ozone-bin
          path: hadoop-ozone/dist/target/ozone*.tar.gz
          retention-days: 1
      - name: Delete temporary build artifacts before caching
        run: |
          #Never cache local artifacts
          rm -rf ~/.m2/repository/org/apache/ozone/hdds*
          rm -rf ~/.m2/repository/org/apache/ozone/ozone*
        if: always()
